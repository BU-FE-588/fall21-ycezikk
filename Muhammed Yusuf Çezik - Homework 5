{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Homework 5 (A prerequisite for Project)\n",
    "\n",
    "In your project, you are expected to evaluate alternative trading strategies (i.e. algorithmic trading). \"Algorithmic or Quantitative trading is the process of designing and developing trading strategies based on mathematical and statistical analyses\" ([source](https://www.freecodecamp.org/news/algorithmic-trading-in-python/)). This requires a connection to a data source and this homework is related to setting up the required connections and some simple data manipulation steps. \n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Task 1\n",
    "This task requires to set up a free account for Quandl API [https://docs.data.nasdaq.com/](https://docs.data.nasdaq.com/). This [link](https://docs.data.nasdaq.com/docs/python-installation) provides the details about installation of the quandl module and setting up authentication details to get relevant information.\n",
    "\n",
    "- Install quandl using command window (or web interface will also work fine if you use Anaconda Navigator) <br> \n",
    "pip install quandl\n",
    "- Check if it is installed by importing the module as below. If there is no error, you are good to go."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "import quandl"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- Create an account if you do not have any from the [link](https://data.nasdaq.com/sign-up). Signing-up as \"academic\" is suggested.\n",
    "- You will receive your API key once you complete your registration. \n",
    "- If you already have an account, you can find your API key from your account details.\n",
    "- We will import pandas and quandl modules to check if everything works. \n",
    "- Set your API key (i.e. register within Python)\n",
    "- Send a sample data request."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Open</th>\n",
       "      <th>High</th>\n",
       "      <th>Low</th>\n",
       "      <th>Close</th>\n",
       "      <th>Volume</th>\n",
       "      <th>Ex-Dividend</th>\n",
       "      <th>Split Ratio</th>\n",
       "      <th>Adj. Open</th>\n",
       "      <th>Adj. High</th>\n",
       "      <th>Adj. Low</th>\n",
       "      <th>Adj. Close</th>\n",
       "      <th>Adj. Volume</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Date</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2010-06-29</th>\n",
       "      <td>19.00</td>\n",
       "      <td>25.0000</td>\n",
       "      <td>17.54</td>\n",
       "      <td>23.89</td>\n",
       "      <td>18766300.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>19.00</td>\n",
       "      <td>25.0000</td>\n",
       "      <td>17.54</td>\n",
       "      <td>23.89</td>\n",
       "      <td>18766300.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2010-06-30</th>\n",
       "      <td>25.79</td>\n",
       "      <td>30.4192</td>\n",
       "      <td>23.30</td>\n",
       "      <td>23.83</td>\n",
       "      <td>17187100.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>25.79</td>\n",
       "      <td>30.4192</td>\n",
       "      <td>23.30</td>\n",
       "      <td>23.83</td>\n",
       "      <td>17187100.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2010-07-01</th>\n",
       "      <td>25.00</td>\n",
       "      <td>25.9200</td>\n",
       "      <td>20.27</td>\n",
       "      <td>21.96</td>\n",
       "      <td>8218800.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>25.00</td>\n",
       "      <td>25.9200</td>\n",
       "      <td>20.27</td>\n",
       "      <td>21.96</td>\n",
       "      <td>8218800.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2010-07-02</th>\n",
       "      <td>23.00</td>\n",
       "      <td>23.1000</td>\n",
       "      <td>18.71</td>\n",
       "      <td>19.20</td>\n",
       "      <td>5139800.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>23.00</td>\n",
       "      <td>23.1000</td>\n",
       "      <td>18.71</td>\n",
       "      <td>19.20</td>\n",
       "      <td>5139800.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2010-07-06</th>\n",
       "      <td>20.00</td>\n",
       "      <td>20.0000</td>\n",
       "      <td>15.83</td>\n",
       "      <td>16.11</td>\n",
       "      <td>6866900.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>20.00</td>\n",
       "      <td>20.0000</td>\n",
       "      <td>15.83</td>\n",
       "      <td>16.11</td>\n",
       "      <td>6866900.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             Open     High    Low  Close      Volume  Ex-Dividend  \\\n",
       "Date                                                                \n",
       "2010-06-29  19.00  25.0000  17.54  23.89  18766300.0          0.0   \n",
       "2010-06-30  25.79  30.4192  23.30  23.83  17187100.0          0.0   \n",
       "2010-07-01  25.00  25.9200  20.27  21.96   8218800.0          0.0   \n",
       "2010-07-02  23.00  23.1000  18.71  19.20   5139800.0          0.0   \n",
       "2010-07-06  20.00  20.0000  15.83  16.11   6866900.0          0.0   \n",
       "\n",
       "            Split Ratio  Adj. Open  Adj. High  Adj. Low  Adj. Close  \\\n",
       "Date                                                                  \n",
       "2010-06-29          1.0      19.00    25.0000     17.54       23.89   \n",
       "2010-06-30          1.0      25.79    30.4192     23.30       23.83   \n",
       "2010-07-01          1.0      25.00    25.9200     20.27       21.96   \n",
       "2010-07-02          1.0      23.00    23.1000     18.71       19.20   \n",
       "2010-07-06          1.0      20.00    20.0000     15.83       16.11   \n",
       "\n",
       "            Adj. Volume  \n",
       "Date                     \n",
       "2010-06-29   18766300.0  \n",
       "2010-06-30   17187100.0  \n",
       "2010-07-01    8218800.0  \n",
       "2010-07-02    5139800.0  \n",
       "2010-07-06    6866900.0  "
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import quandl as q\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "# set the API key\n",
    "q.ApiConfig.api_key = \"bJWHDnE5zLHPyn_GzAwy\"\n",
    "\n",
    "#send a get request to query Tesla's end of day stock prices from 1st #Jan, 2010 to 1st Jan, 2019\n",
    "tesla_data = q.get(\"WIKI/TSLA\", start_date=\"2010-01-01\", end_date=\"2018-01-01\")\n",
    "\n",
    "# check the first 5 rows of the dataframe\n",
    "tesla_data.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Note that get method requires certain arguments in some form. The details of the call is provided [here](https://docs.data.nasdaq.com/docs/parameters-2#section-times-series-parameters). We made a request to TESLA's daily prices between two dates by \"WIKI/TSLA\". WIKI is a data product code. The details on the data organization is provided [here](https://docs.data.nasdaq.com/docs/data-organization). Some of the products are free as you can see from the link. We have used \"WIKI\" free product which is \"End of Day US Stock Prices\" to get TESLA prices. There are some other prices/indices that are available for free. You can check those in you are interested.\n",
    "\n",
    "Once you have obtained the information in a pandas dataframe, this task is completed."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Task 2\n",
    "\n",
    "Implement a function that calculates simple moving average (SMA) of closing prices. Note that simple moving average calculates the average of the values in the most recent past $k$ periods (day in our case). Therefore the function will take an argument \"number of periods\". Technical analysis people like to use such statistics in order to make trading decisions. You can find [this link](https://www.profitaddaweb.com/2017/07/smasimple-moving-average-technical.html) useful."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "def SMA(n_of_periods):\n",
    "    closing_prices = tesla_data[[\"Close\"]]\n",
    "    return closing_prices.rolling(n_of_periods).mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Price and SMA')"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "SMA_30 = SMA(n_of_periods=30)\n",
    "plt.plot(tesla_data[[\"Close\"]])\n",
    "plt.plot(SMA_30)\n",
    "plt.legend([\"Closing Prices\",\"SMA_30\"])\n",
    "plt.title(\"Price and SMA\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Task 3\n",
    "\n",
    "Implement a function that calculates simple moving standard deviation of closing prices so that one can have some understanding of the volatility in the prices. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "metadata": {},
   "outputs": [],
   "source": [
    "def std_moving_average(k,df,column):\n",
    "    \n",
    "    df_std_sma=pd.DataFrame(index=df.index)\n",
    "    for number,row_id in enumerate(df.index[k-1:]):\n",
    "        df_std_sma.at[row_id,\"{}_{}_VOL_SMA\".format(column,k)]=df[column].iloc[number:k+number].std()\n",
    "    return df_std_sma"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "metadata": {},
   "outputs": [],
   "source": [
    "tesla_data[\"price_change\"]=tesla_data[\"Close\"].pct_change()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>price_change_30_VOL_SMA</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Date</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2010-06-29</th>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2010-06-30</th>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2010-07-01</th>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2010-07-02</th>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2010-07-06</th>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-12-22</th>\n",
       "      <td>0.019305</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-12-26</th>\n",
       "      <td>0.019916</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-12-27</th>\n",
       "      <td>0.018783</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-12-28</th>\n",
       "      <td>0.018477</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-12-29</th>\n",
       "      <td>0.018582</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1890 rows × 1 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "            price_change_30_VOL_SMA\n",
       "Date                               \n",
       "2010-06-29                      NaN\n",
       "2010-06-30                      NaN\n",
       "2010-07-01                      NaN\n",
       "2010-07-02                      NaN\n",
       "2010-07-06                      NaN\n",
       "...                             ...\n",
       "2017-12-22                 0.019305\n",
       "2017-12-26                 0.019916\n",
       "2017-12-27                 0.018783\n",
       "2017-12-28                 0.018477\n",
       "2017-12-29                 0.018582\n",
       "\n",
       "[1890 rows x 1 columns]"
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "std_moving_average(30,tesla_data,\"price_change\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "metadata": {},
   "outputs": [],
   "source": [
    "def SM_STD(n_of_periods):\n",
    "    closing_prices = tesla_data[[\"Close\"]]\n",
    "    return closing_prices.rolling(n_of_periods).std()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x7fe11a551b50>"
      ]
     },
     "execution_count": 84,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "SM_STD(n_of_periods = 30).plot()\n",
    "plt.title(\"Simple Moving Standard Deviation\")\n",
    "plt.legend([\"SM_STD\"])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Task 4\n",
    "\n",
    "Assume that you are asked to devise a simple trading strategy which takes moving standard deviation and average into account. As an example, you may end up with such a strategy:\n",
    "\n",
    "- If moving standard deviation is larger than some number, do nothing (this is kind of a risk averse setting)\n",
    "- If last price observed is larger than the average, buy the stock, sell otherwise.\n",
    "\n",
    "This is just a very simple example based on the moving statistics of the closing prices. You may end up with a better strategy. In order to understand if the strategy is reasonable, we generally try to see the performance of the trading algorithm using a predefined past period. This is so called backtesting. This will be done in a paper-trading setting. A paper trade is a simulated trade that allows an investor to practice buying and selling without risking real money. Note that paper trading may not be representative of the real trade because of the market dynamics.\n",
    "\n",
    "Here we will assume that you have 1 unit of money allowed for trading each day. You can invest or keep it. If you pass investing on a day (because of some rule you use like in the volatility example above), it is assumed that you lost the opportunity (in other words, the money to be invested is not accumulated for the use on the next day).\n",
    "\n",
    "Implement a trading strategy based on the statistics and evaluate the strategy for the year 2017 on the Tesla prices. You need to keep track of the everyday actions in a pandas dataframe then report the invested money and total value of your investment at the end of the year. Report relevant statistics (be creative here)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "metadata": {},
   "outputs": [],
   "source": [
    "k = 30\n",
    "SMA_k = SMA(k)                                     \n",
    "SM_STD_k = SM_STD(k)                               \n",
    "tesla = tesla_data[[\"Close\"]].copy()               \n",
    "tesla[\"SMA_\"+str(k)] = SMA_k                      \n",
    "tesla[\"STD_\"+str(k)] = SM_STD_k\n",
    "tesla = tesla.loc[tesla.index >= \"2017-01-01\"]     "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Close</th>\n",
       "      <th>SMA_30</th>\n",
       "      <th>STD_30</th>\n",
       "      <th>Signal</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Date</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2017-01-03</th>\n",
       "      <td>216.99</td>\n",
       "      <td>198.473000</td>\n",
       "      <td>11.612624</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-01-04</th>\n",
       "      <td>226.99</td>\n",
       "      <td>199.872000</td>\n",
       "      <td>12.435015</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-01-05</th>\n",
       "      <td>226.75</td>\n",
       "      <td>201.279667</td>\n",
       "      <td>13.013992</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-01-06</th>\n",
       "      <td>229.01</td>\n",
       "      <td>202.541000</td>\n",
       "      <td>13.809782</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-01-09</th>\n",
       "      <td>231.28</td>\n",
       "      <td>203.812333</td>\n",
       "      <td>14.644824</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             Close      SMA_30     STD_30  Signal\n",
       "Date                                             \n",
       "2017-01-03  216.99  198.473000  11.612624     NaN\n",
       "2017-01-04  226.99  199.872000  12.435015     0.0\n",
       "2017-01-05  226.75  201.279667  13.013992     0.0\n",
       "2017-01-06  229.01  202.541000  13.809782     0.0\n",
       "2017-01-09  231.28  203.812333  14.644824     0.0"
      ]
     },
     "execution_count": 110,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "std_mean = tesla[\"STD_\"+str(k)].mean()            \n",
    "std_std = tesla[\"STD_\"+str(k)].std()              \n",
    "s = std_mean + std_std                            \n",
    "\n",
    "\n",
    "signal = (tesla[\"SMA_\"+str(k)] < tesla[\"Close\"])   \n",
    "signal = signal.astype(int)                       \n",
    "tesla[\"Signal\"] = signal   \n",
    "\n",
    "volatile_days = tesla[\"STD_\"+str(k)] >= s\n",
    "tesla.loc[volatile_days, \"Signal\"] = np.nan        \n",
    "tesla = tesla.ffill(axis = 0)                      \n",
    "tesla[\"Signal\"] = tesla[\"Signal\"].diff()           \n",
    "tesla.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Close</th>\n",
       "      <th>SMA_30</th>\n",
       "      <th>STD_30</th>\n",
       "      <th>Signal</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Date</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2017-01-03</th>\n",
       "      <td>216.99</td>\n",
       "      <td>198.473000</td>\n",
       "      <td>11.612624</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-01-04</th>\n",
       "      <td>226.99</td>\n",
       "      <td>199.872000</td>\n",
       "      <td>12.435015</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-01-05</th>\n",
       "      <td>226.75</td>\n",
       "      <td>201.279667</td>\n",
       "      <td>13.013992</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-01-06</th>\n",
       "      <td>229.01</td>\n",
       "      <td>202.541000</td>\n",
       "      <td>13.809782</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-01-09</th>\n",
       "      <td>231.28</td>\n",
       "      <td>203.812333</td>\n",
       "      <td>14.644824</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             Close      SMA_30     STD_30  Signal\n",
       "Date                                             \n",
       "2017-01-03  216.99  198.473000  11.612624     1.0\n",
       "2017-01-04  226.99  199.872000  12.435015     0.0\n",
       "2017-01-05  226.75  201.279667  13.013992     0.0\n",
       "2017-01-06  229.01  202.541000  13.809782     0.0\n",
       "2017-01-09  231.28  203.812333  14.644824     0.0"
      ]
     },
     "execution_count": 111,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tesla.iloc[0,-1] = (tesla.iloc[0][\"SMA_\"+str(k)] < tesla.iloc[0][\"Close\"]).astype(int)\n",
    "tesla.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Close</th>\n",
       "      <th>SMA_30</th>\n",
       "      <th>STD_30</th>\n",
       "      <th>Signal</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Date</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2017-01-03</th>\n",
       "      <td>216.99</td>\n",
       "      <td>198.473000</td>\n",
       "      <td>11.612624</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-02-23</th>\n",
       "      <td>255.99</td>\n",
       "      <td>256.093667</td>\n",
       "      <td>14.756037</td>\n",
       "      <td>-1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-03-16</th>\n",
       "      <td>262.05</td>\n",
       "      <td>259.018333</td>\n",
       "      <td>11.656725</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-03-21</th>\n",
       "      <td>250.68</td>\n",
       "      <td>259.466667</td>\n",
       "      <td>11.599835</td>\n",
       "      <td>-1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-03-24</th>\n",
       "      <td>263.16</td>\n",
       "      <td>258.939667</td>\n",
       "      <td>11.512737</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-05-04</th>\n",
       "      <td>295.46</td>\n",
       "      <td>297.915750</td>\n",
       "      <td>16.768732</td>\n",
       "      <td>-1.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             Close      SMA_30     STD_30  Signal\n",
       "Date                                             \n",
       "2017-01-03  216.99  198.473000  11.612624     1.0\n",
       "2017-02-23  255.99  256.093667  14.756037    -1.0\n",
       "2017-03-16  262.05  259.018333  11.656725     1.0\n",
       "2017-03-21  250.68  259.466667  11.599835    -1.0\n",
       "2017-03-24  263.16  258.939667  11.512737     1.0\n",
       "2017-05-04  295.46  297.915750  16.768732    -1.0"
      ]
     },
     "execution_count": 112,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "trades = tesla[tesla[\"Signal\"] != 0].copy()        \n",
    "trades.head(6)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 113,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Open</th>\n",
       "      <th>High</th>\n",
       "      <th>Low</th>\n",
       "      <th>Close</th>\n",
       "      <th>Volume</th>\n",
       "      <th>Ex-Dividend</th>\n",
       "      <th>Split Ratio</th>\n",
       "      <th>Adj. Open</th>\n",
       "      <th>Adj. High</th>\n",
       "      <th>Adj. Low</th>\n",
       "      <th>Adj. Close</th>\n",
       "      <th>Adj. Volume</th>\n",
       "      <th>price_change</th>\n",
       "      <th>Close_30_std_SMA</th>\n",
       "      <th>price_change_30_std_SMA</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Date</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2010-08-10</th>\n",
       "      <td>19.65</td>\n",
       "      <td>19.65</td>\n",
       "      <td>18.8200</td>\n",
       "      <td>19.03</td>\n",
       "      <td>1281300.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>19.65</td>\n",
       "      <td>19.65</td>\n",
       "      <td>18.8200</td>\n",
       "      <td>19.03</td>\n",
       "      <td>1281300.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.937226</td>\n",
       "      <td>0.058274</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2010-08-11</th>\n",
       "      <td>18.69</td>\n",
       "      <td>18.88</td>\n",
       "      <td>17.8500</td>\n",
       "      <td>17.90</td>\n",
       "      <td>797600.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>18.69</td>\n",
       "      <td>18.88</td>\n",
       "      <td>17.8500</td>\n",
       "      <td>17.90</td>\n",
       "      <td>797600.0</td>\n",
       "      <td>-0.059380</td>\n",
       "      <td>1.832744</td>\n",
       "      <td>0.058080</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2010-08-12</th>\n",
       "      <td>17.80</td>\n",
       "      <td>17.90</td>\n",
       "      <td>17.3900</td>\n",
       "      <td>17.60</td>\n",
       "      <td>691000.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>17.80</td>\n",
       "      <td>17.90</td>\n",
       "      <td>17.3900</td>\n",
       "      <td>17.60</td>\n",
       "      <td>691000.0</td>\n",
       "      <td>-0.016760</td>\n",
       "      <td>1.714383</td>\n",
       "      <td>0.058093</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2010-08-13</th>\n",
       "      <td>18.18</td>\n",
       "      <td>18.45</td>\n",
       "      <td>17.6604</td>\n",
       "      <td>18.32</td>\n",
       "      <td>634000.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>18.18</td>\n",
       "      <td>18.45</td>\n",
       "      <td>17.6604</td>\n",
       "      <td>18.32</td>\n",
       "      <td>634000.0</td>\n",
       "      <td>0.040909</td>\n",
       "      <td>1.672380</td>\n",
       "      <td>0.057207</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2010-08-16</th>\n",
       "      <td>18.45</td>\n",
       "      <td>18.80</td>\n",
       "      <td>18.2616</td>\n",
       "      <td>18.78</td>\n",
       "      <td>485800.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>18.45</td>\n",
       "      <td>18.80</td>\n",
       "      <td>18.2616</td>\n",
       "      <td>18.78</td>\n",
       "      <td>485800.0</td>\n",
       "      <td>0.025109</td>\n",
       "      <td>1.676840</td>\n",
       "      <td>0.052624</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             Open   High      Low  Close     Volume  Ex-Dividend  Split Ratio  \\\n",
       "Date                                                                            \n",
       "2010-08-10  19.65  19.65  18.8200  19.03  1281300.0          0.0          1.0   \n",
       "2010-08-11  18.69  18.88  17.8500  17.90   797600.0          0.0          1.0   \n",
       "2010-08-12  17.80  17.90  17.3900  17.60   691000.0          0.0          1.0   \n",
       "2010-08-13  18.18  18.45  17.6604  18.32   634000.0          0.0          1.0   \n",
       "2010-08-16  18.45  18.80  18.2616  18.78   485800.0          0.0          1.0   \n",
       "\n",
       "            Adj. Open  Adj. High  Adj. Low  Adj. Close  Adj. Volume  \\\n",
       "Date                                                                  \n",
       "2010-08-10      19.65      19.65   18.8200       19.03    1281300.0   \n",
       "2010-08-11      18.69      18.88   17.8500       17.90     797600.0   \n",
       "2010-08-12      17.80      17.90   17.3900       17.60     691000.0   \n",
       "2010-08-13      18.18      18.45   17.6604       18.32     634000.0   \n",
       "2010-08-16      18.45      18.80   18.2616       18.78     485800.0   \n",
       "\n",
       "            price_change  Close_30_std_SMA  price_change_30_std_SMA  \n",
       "Date                                                                 \n",
       "2010-08-10           NaN          1.937226                 0.058274  \n",
       "2010-08-11     -0.059380          1.832744                 0.058080  \n",
       "2010-08-12     -0.016760          1.714383                 0.058093  \n",
       "2010-08-13      0.040909          1.672380                 0.057207  \n",
       "2010-08-16      0.025109          1.676840                 0.052624  "
      ]
     },
     "execution_count": 113,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tesla_data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Close</th>\n",
       "      <th>SMA_30</th>\n",
       "      <th>STD_30</th>\n",
       "      <th>Signal</th>\n",
       "      <th>Buy_Sell_return</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Date</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2017-01-03</th>\n",
       "      <td>216.99</td>\n",
       "      <td>198.473000</td>\n",
       "      <td>11.612624</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-02-23</th>\n",
       "      <td>255.99</td>\n",
       "      <td>256.093667</td>\n",
       "      <td>14.756037</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>0.179732</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-03-16</th>\n",
       "      <td>262.05</td>\n",
       "      <td>259.018333</td>\n",
       "      <td>11.656725</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-03-21</th>\n",
       "      <td>250.68</td>\n",
       "      <td>259.466667</td>\n",
       "      <td>11.599835</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>-0.043389</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-03-24</th>\n",
       "      <td>263.16</td>\n",
       "      <td>258.939667</td>\n",
       "      <td>11.512737</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             Close      SMA_30     STD_30  Signal  Buy_Sell_return\n",
       "Date                                                              \n",
       "2017-01-03  216.99  198.473000  11.612624     1.0              NaN\n",
       "2017-02-23  255.99  256.093667  14.756037    -1.0         0.179732\n",
       "2017-03-16  262.05  259.018333  11.656725     1.0              NaN\n",
       "2017-03-21  250.68  259.466667  11.599835    -1.0        -0.043389\n",
       "2017-03-24  263.16  258.939667  11.512737     1.0              NaN"
      ]
     },
     "execution_count": 114,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "trades[\"Buy_Sell_return\"] = trades[\"Close\"].pct_change()\n",
    "trades.loc[trades.Signal == 1, \"Buy_Sell_return\"] = np.nan\n",
    "trades.head()  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "invested 1 unit of money when the buy signal emerged.\n"
     ]
    }
   ],
   "source": [
    "(trades[\"Buy_Sell_return\"].dropna().cumsum()+1).plot()\n",
    "plt.ylabel(\"Return\")\n",
    "plt.title(\" Invested in 1 unit of Money\")\n",
    "plt.show()\n",
    "print(\"invested 1 unit of money when the buy signal emerged.\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Task 5\n",
    "\n",
    "One important baseline strategy that is commonly used in trading algorithm evaluation is buy and hold strategy. Assume that you have invested 1 unit of money every day (in the form of a \"buy\" decision) and hold it. What is the final status of your investment. Compare with your proposed strategy."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "total money invested :  12  units of money\n",
      "average stock cost is  314.9308333333334\n",
      "last price of the stock is 311.35\n",
      "average return is -0.011370221503663624\n"
     ]
    }
   ],
   "source": [
    "buy_hold_trades = trades[trades[\"Signal\"]==1].iloc[:,:-1]\n",
    "total_money_invested = len(buy_hold_trades)\n",
    "average_cost = buy_hold_trades.Close.mean()\n",
    "last_price = tesla.iloc[-1][\"Close\"]\n",
    "print(\"total money invested : \", total_money_invested,\" units of money\")\n",
    "print(\"average stock cost is \", average_cost)\n",
    "print(\"last price of the stock is\", last_price )\n",
    "print(\"average return is\", last_price/average_cost -1 )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
